{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","googleUrl","concat","this","props","business","address","city","state","zipCode","react_default","a","createElement","className","href","url","target","src","imageSrc","alt","name","category","toUpperCase","rating","reviewCount","React","Component","BusinessList","businesses","map","components_Business_Business","key","id","SearchBar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","term","location","sortBy","sortByOptions","Best Match","Highest Rated","Most Reviewed","Distance","handleTermChange","bind","assertThisInitialized","handleLocationChange","handleSearch","handleEnter","sortByOption","_this2","setState","searchYelp","event","value","preventDefault","window","keyCode","_this3","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","onKeyPress","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","image_url","address1","zip_code","categories","title","review_count","App","components_SearchBar_SearchBar","components_BusinessList_BusinessList","Boolean","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.777806e7.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\n\n\nclass Business extends React.Component {\n    render() {\n      const googleUrl = `http://maps.google.com/?q=${this.props.business.address} ${this.props.business.city} ${this.props.business.state} ${this.props.business.zipCode}`;\n        return (\n            <div className=\"Business\">\n              <div className=\"image-container\">\n                <a href={this.props.business.url} target=\"_blank\">\n                  <img src={this.props.business.imageSrc} alt=''/>\n                </a>\n              </div>\n              <h2>{this.props.business.name}</h2>\n              <div className=\"Business-information\">\n                <div className=\"Business-address\">\n                  <a href={googleUrl}  target=\"_blank\">\n                    <p>{this.props.business.address}</p>\n                    <p>{this.props.business.city}</p>\n                    <p>{`${this.props.business.state} ${this.props.business.zipCode}`}</p>\n                  </a>\n                </div>\n                <div className=\"Business-reviews\">\n                  <h3>{this.props.business.category.toUpperCase()}</h3>\n                  <h3 className=\"rating\">{`${this.props.business.rating} stars`}</h3>\n                  <p>{`${this.props.business.reviewCount} reviews`}</p>\n                </div>\n              </div>\n            </div>\n        );\n    }\n}\n\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n    render() {\n        return (\n            <div className=\"BusinessList\">\n                {this.props.businesses.map(business => {\n                    return <Business \n                    business={business} \n                    key={business.id}\n                    />\n                })}\n            </div>\n        )\n    }\n}\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            term: '',\n            location: '',\n            sortBy: 'best_match'\n            }\n        this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count',\n            'Distance': 'distance'\n        }\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleEnter = this.handleEnter.bind(this);\n    }\n\n    getSortByClass(sortByOption) {\n        if (this.state.sortBy === sortByOption) {\n            return 'active';\n        } else {\n            return '';\n        }\n    }\n\n    handleSortByChange(sortByOption) {\n        if (this.state.term === '' || this.state.location === '') {\n            this.setState({sortBy: sortByOption});\n        } else {\n            this.setState({sortBy: sortByOption}, () => {\n                this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n            });\n        }\n    }\n\n    handleTermChange(event) {\n        this.setState({term: event.target.value});\n    }\n\n    handleLocationChange(event) {\n        this.setState({location: event.target.value});\n    }\n\n    handleSearch(event) {\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        event.preventDefault()\n    }\n\n    handleEnter(event) {\n        if (window.event.keyCode === 13) {\n            return this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n            event.preventDefault()\n        } \n    }\n\n    renderSortByOptions() {\n        return Object.keys(this.sortByOptions).map(sortByOption => {\n            let sortByOptionValue = this.sortByOptions[sortByOption];\n            return <li \n                className={this.getSortByClass(sortByOptionValue)} \n                key={sortByOptionValue}\n                onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\n                >{sortByOption}</li>\n        });  \n    }\n\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                        {this.renderSortByOptions()}\n                    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <input \n                        placeholder=\"Search Businesses\" \n                        onChange={this.handleTermChange}/>\n                    <input \n                        placeholder=\"Where?\" \n                        onChange={this.handleLocationChange}\n                        onKeyPress={this.handleEnter}/>\n                </div>\n                <div className=\"SearchBar-submit\">\n                    <a onClick={this.handleSearch}\n                       onKeyPress={this.handleEnter}>Let's Go</a>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;","const apiKey = 'nTXNvbD-PWLQcZxXtGypq4eXFFWBYr7_drYebqBvppB-igzdPiiEX9NdbvoUjLGczFyeVluuLvvR6bytLW9HcojUbX-jmrY5iRVb2j9medm3e0HzPEbCwnqDltJVXXYx';\n\nconst Yelp = {\n    search(term, location, sortBy) {\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n        {\n            headers: {Authorization: `Bearer ${apiKey}`}\n        }).then((response) => {\n            return response.json();\n        }).then(jsonResponse => {\n            if (jsonResponse.businesses) {\n                return jsonResponse.businesses.map(((business) => {\n                    console.log(business);\n                    return {\n                        id: business.id,\n                        imageSrc: business.image_url,\n                        name: business.name,\n                        address: business.location.address1,\n                        city: business.location.city,\n                        state: business.location.state,\n                        zipCode: business.location.zip_code,\n                        category: business.categories[0].title,\n                        rating: business.rating,\n                        reviewCount: business.review_count,\n                        url: business.url\n                        };\n                }));\n            }\n        })\n    }\n};\n\nexport default Yelp;","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: []\n    };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  searchYelp(term, location, sortBy) {\n    Yelp.search(term, location, sortBy).then(businesses => {\n      this.setState({businesses: businesses});\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp}/>\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}